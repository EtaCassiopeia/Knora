@*
 * Copyright © 2015 Lukas Rosenthaler, Benjamin Geer, Ivan Subotic,
 * Tobias Schweizer, André Kilchenmann, and André Fatton.
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi.IRI

@**
 * Gets information about OWL entities.
 *
 * @param entityIris a list of IRIs of OWL entities to get information about.
 *@
@(entityIris: Seq[IRI])


PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>

SELECT ?s ?p ?o ?oProp ?oVal ?lang ?isCardinality ?isKnoraValueProp ?isLinkProp ?isLinkValueProp ?isFileValueProp

WHERE {
    @for((entityIri, index) <- entityIris.zipWithIndex) {
        @if(index > 0) {
            UNION
        }

        {
            @*

            Get all predicates and objects of the class being queried, and all cardinalities
            of that class and of its superclasses.

            *@

            BIND(IRI("@entityIri") as ?s)
            ?s rdfs:subClassOf* ?class .
            ?class ?p ?o .

            OPTIONAL {
                ?o rdf:type ?oType .
            }

            @* If ?class is the entity being queried, return everything about it, otherwise just its cardinalities. *@
            FILTER((?class = ?s) || (?p = rdfs:subClassOf && ?oType = owl:Restriction))

            BIND(lang(?o) as ?lang)

            OPTIONAL {
                ?o a owl:Restriction .
                ?o owl:onProperty ?cardinalityProp .
                ?o ?oProp ?oVal .

                BIND(true as ?isCardinality)

                OPTIONAL {
                    ?cardinalityProp rdfs:subPropertyOf+ knora-base:hasValue .
                    BIND(true as ?isKnoraValueProp)
                }

                OPTIONAL {
                    ?cardinalityProp rdfs:subPropertyOf* knora-base:hasLinkTo .
                    BIND(true as ?isLinkProp)
                }

                OPTIONAL {
                    ?cardinalityProp rdfs:subPropertyOf* knora-base:hasLinkToValue .
                    BIND(true as ?isLinkValueProp)
                }

                OPTIONAL {
                    ?cardinalityProp rdfs:subPropertyOf* knora-base:hasFileValue .
                    BIND(true as ?isFileValueProp)
                }


                @*

                Allow a subclass to override a cardinality in a superclass. For example, suppose that:

                * knora-base:Representation has a cardinality for knora-base:hasFileValue.
                * knora-base:StillImageRepresentation is a subclass of knora-base:Representation and has a cardinality for
                  knora-base:hasStillImageFileValue, which is a subproperty of knora-base:hasFileValue.
                * incunabula:page is a subclass of knora-base:StillImageRepresentation.

                The cardinalities for incunabula:page should include knora-base:hasStillImageFileValue, but not
                knora-base:hasFileValue.

                This works as follows: we were given ?s (incunabula:page), and we are looking at one of its superclasses ?class
                (knora-base:Representation). We find that ?class has some ?cardinalityProp (knora-base:hasFileValue). We then
                find that there exists ?otherClass (knora-base:StillImageRepresentation) that has a cardinality for ?otherProperty
                (knora-base:hasStillImageFileValue), which is a subproperty of ?cardinalityProp. Therefore we exclude the
                cardinality on ?cardinalityProp from the results.

                *@

        		MINUS {
                    ?otherClass rdfs:subClassOf+ ?class .
                    ?s rdfs:subClassOf* ?otherClass .
                    ?otherClass rdfs:subClassOf ?otherRestriction .
                    ?otherRestriction a owl:Restriction .
                    ?otherRestriction owl:onProperty ?otherProperty .
                    ?otherProperty rdfs:subPropertyOf* ?cardinalityProp .
                }
            }
        }
    }
}